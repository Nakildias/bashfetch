#!/bin/bash

#EXPORT
. /etc/os-release

#OPTIONS
COLORS=True #Use "watch --color bashfetch" for color input while monitoring
DISPLAY_BOTTOM_COLORS=False #Doesn't display properly with watch
VM=False
NC='\033[0m'
COLOR_MAIN='\033[36m'
COLOR_SECONDARY='\033[34m'
COLOR_INFO='\033[97m'

#STYLE VARIABLES
S=❯ #Separators

#PATHS VARIABLES
MPATH=~/.config/bashfetch/meminfo

#SYSTEM INFO VARIABLES
DISTRO="$NAME"
KERNEL="Linux $(uname -r)"
FILTERED_KERNEL=$(echo "$KERNEL" | cut  -d '-'  -f1)
SHELL=$(basename $SHELL)
UPTIME_INFO=$(uptime -p)

if command -v pacman &> /dev/null; then
    PACKAGES_ARCH="$(pacman -Q | wc -l) (pacman)"
fi

if command -v dnf &> /dev/null; then
    PACKAGES_FEDORA="$(rpm -qa | wc -l) (rpm)"
fi

if command -v apt &> /dev/null; then
    PACKAGES_DEBIAN="$(dpkg --list | wc -l) (deb)"
fi

if command -v flatpak &> /dev/null; then
    PACKAGES_FLATPAK=", $(flatpak list | wc -l) (flatpaks)"
fi

if command -v emerge &> /dev/null; then
    PACKAGES_GENTOO="$(qlist -I | wc -l) (emerge)"
fi

#SESSION INFO VARIABLES
SESSION=$XDG_SESSION_TYPE
USER=$USER
HOSTNAME=$HOSTNAME
DESKTOP_ENVIRONMENT=$XDG_CURRENT_DESKTOP
TERMINAL=$(ps -o comm= -p "$(($(ps -o ppid= -p "$(($(ps -o sid= -p "$$")))")))")
# Get terminal resolution
TERMINAL_WIDTH=$(tput cols)
TERMINAL_HEIGHT=$(tput lines)

#NETWORK INFO VARIABLES
LOCAL_IP=$(ip -o -4 addr show $INTERFACE | awk '{print $4}' | cut -d'/' -f1 | grep -v '^127\.0\.0\.1$')
INTERFACE=$(ip route | awk '/default/ {print $5}')

if [ "$XDG_SESSION_TYPE" == "" ]; then
  SESSION="Please do not run me as sudo."
fi

if [ "$XDG_SESSION_TYPE" == "tty" ]; then
  SESSION="TTY"
fi

if [ "$XDG_CURRENT_DESKTOP" == "" ]; then
  DESKTOP_ENVIRONMENT=Server
fi

if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
  SESSION=SSH
fi

if [ "$TERMINAL" == "login" ]; then
  TERMINAL=TTY
  #TTY INFO & Style
  S=">" #Separators
fi

if [ "$TERMINAL" == "sudo" ]; then
  TERMINAL="Please do not run me as sudo."
fi

#CPU INFO VARIABLES
CPU_MODEL=$(grep -m 1 'model name' /proc/cpuinfo | cut -d':' -f2 | xargs)
CPU_CORES=$(nproc)
CPU_USAGE=$(top -b -n 1 | grep 'Cpu(s)' | awk '{print $2}' | sed 's/[^0-9.]//g')
if [ "$VM" == "False" ]; then
CPU_TEMP=$(cat /sys/class/thermal/thermal_zone*/temp | tail -n 1 )
CPU_TEMP=$(awk "BEGIN {printf \"%.0f°C\", $CPU_TEMP / 1000}")
fi

#RAM INFO VARIABLES
MEMORY_VENDOR=$(grep "Manufacturer:" $MPATH | head -n 1 | cut -c 16-)
MEMORY_SPEED=$(grep "Speed:" $MPATH | head -n 1 | cut -c 9-)
MEMORY_TYPE=$(grep "Type:" $MPATH | head -n 1 | cut -c 8-)
RAM_MODEL="$MEMORY_VENDOR $MEMORY_TYPE @ $MEMORY_SPEED"
MEMORY_INFO=$(free --mega | grep Mem)
RAM_TOTAL_MB=$(echo $MEMORY_INFO | awk '{print $2}')
RAM_USED_MB=$(echo $MEMORY_INFO | awk '{print $3}')
RAM_FREE_MB=$(echo $MEMORY_INFO | awk '{print $7}')
RAM_TOTAL_GIB=$(awk "BEGIN {printf \"%.2f GiB\", $RAM_TOTAL_MB / 1073.7}")
RAM_USED_GIB=$(awk "BEGIN {printf \"%.2f GiB\", $RAM_USED_MB / 1073.7}")
RAM_FREE_GIB=$(awk "BEGIN {printf \"%.2f GiB\", $RAM_FREE_MB / 1073.7}")
RAM_USAGE="$RAM_USED_GIB / $RAM_TOTAL_GIB"
RAM_USAGE_PERCENTAGE=$(awk "BEGIN {printf \"%.0f%%\", ($RAM_USED_MB / $RAM_TOTAL_MB) * 100}")

#RAM INFO ROOTLESS FETCHING (RUNS ONCE) MOVED TO INSTALL.SH
#if [ ! -f $MPATH ]; then
#echo "Creating ~/.config/bashfetch directory"
#mkdir ~/.config/bashfetch
#echo "File $MPATH does not exist. Creating it now..."
#echo "Root privilege is required to read ram details in dmidecode"
#sudo dmidecode --type 17 >> $MPATH
#echo "RAM details saved to $MPATH"
#fi

#DISK INFO VARIABLES
DISK_USAGE=$(df /)
DISK_USED_GiB=$(echo "$DISK_USAGE" | awk 'NR==2{print $3}' | awk '{printf "%.2f", $1 / 1024 / 1024}')
DISK_FREE_GiB=$(echo "$DISK_USAGE" | awk 'NR==2{print $4}' | awk '{printf "%.2f", $1 / 1024 / 1024}')
DISK_TOTAL_GiB=$(awk "BEGIN {print $DISK_USED_GiB + $DISK_FREE_GiB}")
DISK_USAGE_PERCENTAGE=$(echo "$DISK_USAGE" | awk 'NR==2{print $5}' | sed 's/%//g' | bc)


fetch_nvidia() {
#NVIDIA INFO VARIABLES
GPU_TEMP_NVIDIA=$(nvidia-smi --query-gpu=temperature.gpu --format=csv | tail -n 1 )
GPU_TEMP_NVIDIA=$(awk "BEGIN {printf \"%.0f°C\", $GPU_TEMP_NVIDIA / 1}")
GPU_NAME_NVIDIA=$(nvidia-smi --query-gpu=name --format=csv | tail -n 1 )
GPU_USAGE_NVIDIA=$(nvidia-smi --query-gpu=utilization.gpu --format=csv | tail -n 1 )
GPU_USED_MEM_NVIDIA=$(nvidia-smi --query-gpu=memory.used --format=csv | tail -n 1 )
GPU_TOTAL_MEM_NVIDIA=$(nvidia-smi --query-gpu=memory.total --format=csv | tail -n 1 )
}

fetch_amd() {
#AMD INFO VARIABLES
GPU_TEMP_AMD=$(cat $AMDGPU_PATH/temp1_input)
GPU_TEMP_AMD=$(awk "BEGIN {printf \"%.0f°C\", $GPU_TEMP_AMD / 1000}")
GPU_USAGE_AMD=$(cat $AMDGPU_PATH/device/gpu_busy_percent)
GPU_USED_MEM_AMD=$(cat $AMDGPU_PATH/device/mem_info_vram_used)
GPU_TOTAL_MEM_AMD=$(cat $AMDGPU_PATH/device/mem_info_vram_total)
AMD_VRAM_USED_GIB=$(awk "BEGIN {printf \"%.0f MiB\", $GPU_USED_MEM_AMD / 1125000}")
AMD_VRAM_TOTAL_GIB=$(awk "BEGIN {printf \"%.0f MiB\", $GPU_TOTAL_MEM_AMD / 1125000}")
GPU_NAME_AMD=$(glxinfo | grep "Device" | sed 's/ (.*//' | cut -c 13-)
}

fetch_intel() {
#INTEL INFO VARIABLES
#DEVICE=$(glxinfo | grep "Device" | sed 's/ (.*//' | cut -c 18-)
#if [[ "$DEVICE" == *Intel* ]]; then
#GPU_NAME_INTEL=$(glxinfo | grep "Device" | sed 's/ (.*//' | cut -c 18-)
#else
#GPU_NAME_INTEL=$(lspci | grep -i 'VGA' | grep -i 'Intel' | sed -E 's/.*: (.*)/\1/')
GPU_NAME_INTEL=$(lspci | grep -i 'VGA' | grep -i 'Intel' | sed -E 's/.*\[(.*)\].*/\1/')
#fi
}

#DETECT GPUS
detect_gpus() {

#NVIDIA DETECTION
if ! command -v nvidia-smi &> /dev/null; then
SKIP_NVIDIA_GPU="True"
else
SKIP_NVIDIA_GPU="False"
fi

#AMD DETECTION
for hwmon in /sys/class/hwmon/hwmon*; do
if [ -f "$hwmon/name" ]; then
device_name=$(cat "$hwmon/name")
if [ "$device_name" == "amdgpu" ]; then
hwmon_number=${hwmon##/[0-9] }
AMDGPU_PATH=$hwmon_number
SKIP_AMD_GPU=False
break
fi
fi
done
}

#INTEL DETECTION
if lspci | grep -qiE 'vga.*intel'; then
SKIP_INTEL_GPU="False"
else
SKIP_INTEL_GPU="True"
fi

#SYSTEM INFO FUNCTION
sys_color() {
    echo -e "${COLOR_MAIN}System Informations${NC}"
    echo -e "${COLOR_SECONDARY}Distro${NC}   $S ${COLOR_INFO}$DISTRO${NC}"
    echo -e "${COLOR_SECONDARY}Kernel${NC}   $S ${COLOR_INFO}$FILTERED_KERNEL${NC}"
    echo -e "${COLOR_SECONDARY}Packages${NC} $S ${COLOR_INFO}$PACKAGES_ARCH$PACKAGES_DEBIAN$PACKAGES_FEDORA$PACKAGES_GENTOO$PACKAGES_FLATPAK${NC}"
    echo -e "${COLOR_SECONDARY}Uptime${NC}   $S ${COLOR_INFO}$UPTIME_INFO${NC}"
    echo ""
}

ses_color() {
    echo -e "${COLOR_MAIN}Session Informations${NC}"
    echo -e "${COLOR_SECONDARY}Session${NC}  $S ${COLOR_INFO}$DESKTOP_ENVIRONMENT @ $SESSION${NC}"
    echo -e "${COLOR_SECONDARY}User${NC}     $S ${COLOR_INFO}$USER${NC}"
    echo -e "${COLOR_SECONDARY}Hostname${NC} $S ${COLOR_INFO}$HOSTNAME${NC}"
    echo -e "${COLOR_SECONDARY}Shell${NC}    $S ${COLOR_INFO}$SHELL${NC}"
    echo -e "${COLOR_SECONDARY}Terminal${NC} $S ${COLOR_INFO}$TERMINAL @ $TERMINAL_WIDTH * $TERMINAL_HEIGHT${NC}"
    echo ""
}

net_color() {
    echo -e "${COLOR_MAIN}Network Informations${NC}"
    echo -e "${COLOR_SECONDARY}Local IP${NC} $S ${COLOR_INFO}$LOCAL_IP${NC}"
    echo -e "${COLOR_SECONDARY}Net INT  ${NC}$S ${COLOR_INFO}$INTERFACE${NC}"
    echo ""
}

cpu_color() {
    echo -e "${COLOR_MAIN}CPU Informations${NC}"
    echo -e "${COLOR_SECONDARY}Model${NC}    $S ${COLOR_INFO}$CPU_MODEL ($CPU_CORES)${NC}"
    echo -e "${COLOR_SECONDARY}Usage${NC}    $S ${COLOR_INFO}$CPU_USAGE%${NC}"
if [ "$VM" == "False" ]; then
    echo -e "${COLOR_SECONDARY}Temp${NC}     $S ${COLOR_INFO}$CPU_TEMP${NC}"
fi
    echo ""
}

mem_color() {
    echo -e "${COLOR_MAIN}Memory Informations${NC}"
    echo -e "${COLOR_SECONDARY}Model${NC}    $S ${COLOR_INFO}$RAM_MODEL${NC}"
    echo -e "${COLOR_SECONDARY}Usage${NC}    $S ${COLOR_INFO}$RAM_USAGE ($RAM_USAGE_PERCENTAGE)${NC}"
    echo -e ""
}

disk_color() {
    echo -e "${COLOR_MAIN}Partitions Informations${NC}"
#    echo -e "Model    $S" Need to figure out a way to make this efficient
    echo -e "${COLOR_SECONDARY}Root (/)${NC} $S ${COLOR_INFO}$DISK_USED_GiB GiB / $DISK_TOTAL_GiB GiB ($DISK_USAGE_PERCENTAGE%)${NC}"
    echo -e ""
}

nvidia_gpu_color() {
    echo -e "${COLOR_MAIN}NVIDIA GPU Informations${NC}"
    echo -e "${COLOR_SECONDARY}Model${NC}    $S ${COLOR_INFO}$GPU_NAME_NVIDIA${NC}"
    echo -e "${COLOR_SECONDARY}Temp${NC}     $S ${COLOR_INFO}$GPU_TEMP_NVIDIA${NC}"
    echo -e "${COLOR_SECONDARY}Usage${NC}    $S ${COLOR_INFO}$GPU_USAGE_NVIDIA${NC}"
    echo -e "${COLOR_SECONDARY}VRAM${NC}     $S ${COLOR_INFO}$GPU_USED_MEM_NVIDIA / $GPU_TOTAL_MEM_NVIDIA${NC}"
    echo ""
}

amd_gpu_color() {
    echo -e "${COLOR_MAIN}AMD GPU Informations${NC}"
    echo -e "${COLOR_SECONDARY}Model${NC}    $S ${COLOR_INFO}$GPU_NAME_AMD${NC}"
    echo -e "${COLOR_SECONDARY}Temp${NC}     $S ${COLOR_INFO}$GPU_TEMP_AMD${NC}"
    echo -e "${COLOR_SECONDARY}Usage${NC}    $S ${COLOR_INFO}$GPU_USAGE_AMD %${NC}"
    echo -e "${COLOR_SECONDARY}VRAM${NC}     $S ${COLOR_INFO}$AMD_VRAM_USED_GIB / $AMD_VRAM_TOTAL_GIB${NC}"
    echo -e ""
}

intel_gpu_color() {
    echo -e "${COLOR_MAIN}Intel GPU Informations${NC}"
    echo -e "${COLOR_SECONDARY}Model${NC}    $S ${COLOR_INFO}Intel $GPU_NAME_INTEL${NC}"
}

display_color() {
# Reset color
RESET='\033[0m'

# Define all 16 ANSI colors with RGB values
declare -a COLORS=(
    "38;2;0;0;0"      # Black
    "38;2;255;0;0"     # Red
    "38;2;0;255;0"     # Green
    "38;2;255;255;0"   # Yellow
    "38;2;0;0;255"     # Blue
    "38;2;255;0;255"   # Magenta
    "38;2;0;255;255"   # Cyan
    "38;2;255;255;255" # White
    "38;2;127;127;127" # Bright Black (Gray)
    "38;2;255;0;127"   # Bright Red
    "38;2;0;255;127"   # Bright Green
    "38;2;255;255;127" # Bright Yellow
    "38;2;127;127;255" # Bright Blue
    "38;2;255;127;255" # Bright Magenta
    "38;2;127;255;255" # Bright Cyan
    "38;2;255;255;255" # Bright White (same as white)
)

# Print 2 rows of 8 colors each  (16 total)
for row in {0..1}; do
    for col in {0..7}; do
        color_index=$((row * 8 + col))
        color_code="${COLORS[$color_index]}"
        printf "\e[${color_code}m████\e[0m"
    done
    echo -e ""
done
}
if [ "$COLORS" == "True" ]; then
sys_color
ses_color
net_color
cpu_color
mem_color
fi
detect_gpus
if [ "$SKIP_NVIDIA_GPU" == "False" ]; then
fetch_nvidia
fi

if [ "$SKIP_AMD_GPU" == "False" ]; then
fetch_amd
fi

if [ "$SKIP_INTEL_GPU" == "False" ]; then
fetch_intel
fi

if [ "$COLORS" == "True" ]; then
disk_color

if [ "$SKIP_NVIDIA_GPU" == "False" ]; then
nvidia_gpu_color
fi

if [ "$SKIP_AMD_GPU" == "False" ]; then
amd_gpu_color
fi

if [ "$SKIP_INTEL_GPU" == "False" ]; then
intel_gpu_color
fi
fi

#COLORLESS

#SYSTEM INFO FUNCTION
sys_colorless() {
    echo "System Informations"
    echo "Distro   $S $DISTRO"
    echo "Kernel   $S $FILTERED_KERNEL"
    echo "Packages $S $PACKAGES_ARCH$PACKAGES_DEBIAN$PACKAGES_GENTOO$PACKAGES_FLATPAK"
    echo "Uptime   $S $UPTIME_INFO"
    echo ""
}

ses_colorless() {
    echo "Session Informations"
    echo "Session  $S $DESKTOP_ENVIRONMENT @ $SESSION"
    echo "User     $S $USER"
    echo "Hostname $S $HOSTNAME"
    echo "Shell    $S $SHELL"
    echo "Terminal $S $TERMINAL @ $TERMINAL_WIDTH * $TERMINAL_HEIGHT"
    echo ""
}

net_colorless() {
    echo "Network Informations"
    echo "Local IP $S $LOCAL_IP"
    echo "Net INT  $S $INTERFACE"
    echo ""
}

cpu_colorless() {
    echo "CPU Informations"
    echo "Model    $S $CPU_MODEL ($CPU_CORES)"
    echo "Usage    $S $CPU_USAGE%"
if [ "$VM" == "False" ]; then
    echo "Temp     $S $CPU_TEMP"
fi
    echo ""
}

mem_colorless() {
    echo "Memory Informations"
    echo "Model    $S $RAM_MODEL"
    echo "Usage    $S $RAM_USAGE ($RAM_USAGE_PERCENTAGE)"
    echo ""
}

disk_colorless() {
    echo "Partitions Informations"
#    echo "Model    $S" Need to figure out a way to make this efficient
    echo "Root (/) $S $DISK_USED_GiB GiB / $DISK_TOTAL_GiB GiB ($DISK_USAGE_PERCENTAGE%)"
    echo ""
}

nvidia_gpu_colorless() {
    echo "NVIDIA GPU Informations"
    echo "Model    $S $GPU_NAME_NVIDIA"
    echo "Temp     $S $GPU_TEMP_NVIDIA"
    echo "Usage    $S $GPU_USAGE_NVIDIA"
    echo "VRAM     $S $GPU_USED_MEM_NVIDIA / $GPU_TOTAL_MEM_NVIDIA"
    echo ""
}

amd_gpu_colorless() {
    echo "AMD GPU Informations"
    echo "Model    $S $GPU_NAME_AMD"
    echo "Temp     $S $GPU_TEMP_AMD"
    echo "Usage    $S $GPU_USAGE_AMD %"
    echo "VRAM     $S $AMD_VRAM_USED_GIB / $AMD_VRAM_TOTAL_GIB"
    echo ""
}

intel_gpu_colorless() {
    echo "Intel GPU Informations"
    echo "Model    $S Intel $GPU_NAME_INTEL"
}

if [ "$COLORS" == "False" ]; then
sys_colorless
ses_colorless
net_colorless
cpu_colorless
mem_colorless
disk_colorless
if [ "$SKIP_NVIDIA_GPU" == "False" ]; then
nvidia_gpu_colorless
fi
if [ "$SKIP_AMD_GPU" == "False" ]; then
amd_gpu_colorless
fi
if [ "$SKIP_INTEL_GPU" == "False" ]; then
intel_gpu_colorless
fi
fi

if [ "$DISPLAY_BOTTOM_COLORS" == "True" ]; then
display_color
fi
