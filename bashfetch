#!/bin/bash
VM=False
# Check if ~/.meminfo exists
if [ ! -f ~/.meminfo ]; then
    echo "File ~/.meminfo does not exist. Creating it now..."
    echo "Root privilege is required to read ram details in dmidecode"
    sudo dmidecode --type 17 >> ~/.meminfo
    echo "RAM details saved to ~/.meminfo"
fi

# Check if nvidia-smi is available
if ! command -v nvidia-smi &> /dev/null; then
#  echo "Error: nvidia-smi not found. Skipping NVIDIA GPU check."
  SKIP_NVIDIA_GPU="True"
else
  SKIP_NVIDIA_GPU="False"
fi


USERNAME=$(whoami)
. /etc/os-release
KERNEL=$(uname -r)
CPU_MODEL=$(lscpu | grep "Model name" | cut -c 39-)
if [ $VM != True ]; then
CPU_FREQUENCY_MAX=$(lscpu | grep "max MHz" | cut -c 39-)
CPU_FREQUENCY_MIN=$(lscpu | grep "min MHz" | cut -c 39-)
CPU_FREQUENCY_CUR=$(lscpu | grep "scaling MHz" | cut -c 39-)
CPU_FREQUENCY_CUR=$(echo "$CPU_FREQUENCY_CUR" | sed 's/%//g')
CPU_FREQUENCY_CUR_BC=$(echo "$CPU_FREQUENCY_CUR / 100 * $CPU_FREQUENCY_MAX" | bc -l)
CPU_FREQUENCY_CUR_BC=$(echo "$CPU_FREQUENCY_CUR_BC" |  sed 's/.000000//g')
CPU_FREQUENCY_MAX=$(echo "$CPU_FREQUENCY_MAX" |  sed 's/.0000//g')
CPU_FREQUENCY_MIN=$(echo "$CPU_FREQUENCY_MIN" |  sed 's/.0000//g')
fi

#DISK
ROOT_PART_INFO=$(df -h / | tail -1)

TOTAL_SIZE=$(echo $ROOT_PART_INFO | awk '{print $2}')
USED_SPACE=$(echo $ROOT_PART_INFO | awk '{print $3}')
FREE_SPACE=$(echo $ROOT_PART_INFO | awk '{print $4}')
USAGE_PERCENT=$(echo $ROOT_PART_INFO | awk '{print $5}')

#DISK INFO

# Find the device containing the root filesystem
ROOT_DEVICE=$(findmnt -n -o SOURCE /)

# Extract the base disk name from the device
if [[ "$ROOT_DEVICE" =~ ^(/dev/(sd[a-z]|vd[a-z]|nvme[0-9]n[0-9]|xvd[a-z])) ]]; then
  DISK_MODEL=$(basename "$BASH_REMATCH")
else
  echo "Unable to determine the root disk." >&2
fi

# Assign the disk model to the DISK_MODEL variable
if [ "$DISK_MODEL" != "vda" ]; then
DISK_MODEL=$(cat /sys/class/block/$DISK_MODEL/device/model)
fi

if [ "$DISK_MODEL" = "vda" ]; then
DISK_MODEL=Virtual\ Disk
fi

# Read the contents of ~/.gpuinfo file
#while IFS= read -r line; do
    # Check if the string "*-display" is present in the current line
#    if [[ "$line" == *"-display"* ]]; then
        # Increment GPU_COUNT by 1 for each occurrence
#        ((GPU_COUNT++))
#    fi
#done < ~/.gpuinfo

#RAM
# Use `free` to get memory info in MB
MEMORY_INFO=$(free --mega | grep Mem)

# Extract values in MB
TOTAL_MB=$(echo $MEMORY_INFO | awk '{print $2}')
USED_MB=$(echo $MEMORY_INFO | awk '{print $3}')
AVAILABLE_MB=$(echo $MEMORY_INFO | awk '{print $7}')

# Calculate free RAM: free = available RAM
FREE_MB=$AVAILABLE_MB

# Convert values to GiB with two decimal points
TOTAL_GIB=$(awk "BEGIN {printf \"%.2f GiB\", $TOTAL_MB / 1073.7}")
USED_GIB=$(awk "BEGIN {printf \"%.2f GiB\", $USED_MB / 1073.7}")
FREE_GIB=$(awk "BEGIN {printf \"%.2f GiB\", $FREE_MB / 1073.7}")

# Calculate percentage of used RAM
USED_PERCENTAGE=$(awk "BEGIN {printf \"%.0f%%\", ($USED_MB / $TOTAL_MB) * 100}")

#CPU CORES
CPU_CORES=$(nproc)

if [ $VM != True ]; then
#CPU TEMPERATURE AVG
CPU_TEMP=$(cat /sys/class/thermal/thermal_zone*/temp | tail -n 1 )
CPU_TEMP=$(awk "BEGIN {printf \"%.0f°C\", $CPU_TEMP / 1000}")
fi

# Initialize AMDGPU_PATH to empty
AMDGPU_PATH=""

# Loop through each hwmon directory
for hwmon in /sys/class/hwmon/hwmon*; do
  # Check if the "name" file exists
if [ -f "$hwmon/name" ]; then
    # Read the content of the "name" file
    device_name=$(cat "$hwmon/name")
if [ "$device_name" == "amdgpu" ]; then
  # Extract the hwmon number from the path, removing any '/' characters
  hwmon_number=${hwmon##*/}
  hwmon_number=${hwmon_number//\//}
  AMDGPU_PATH=$hwmon_number
  SKIP_AMD_GPU=False
  break
fi
fi
done

    # Check if the device name is "amdgpu"
    #if [ "$device_name" == "amdgpu" ]; then
      # Extract the hwmon number from the path, removing / between hwmon and 3
      #hwmon_number=${hwmon##*/3}
      #AMDGPU_PATH=$hwmon_number
      #SKIP_AMD_GPU=False
      #break
    #fi
  #fi
#done

if [ "$SKIP_AMD_GPU" == "False" ]; then
#GPU TEMPERATURE AMD
GPU_TEMP_AMD=$(cat $AMDGPU_PATH/temp1_input)
GPU_TEMP_AMD=$(awk "BEGIN {printf \"%.0f°C\", $GPU_TEMP_AMD / 1000}")
#CORE USAGE AMD
GPU_USAGE_AMD=$(cat $AMDGPU_PATH/device/gpu_busy_percent)
#VRAM AMD
GPU_USED_MEM_AMD=$(cat $AMDGPU_PATH/device/mem_info_vram_used)
GPU_TOTAL_MEM_AMD=$(cat $AMDGPU_PATH/device/mem_info_vram_total)
AMD_VRAM_USED_GIB=$(awk "BEGIN {printf \"%.0f GiB\", $GPU_USED_MEM_AMD / 1077000000}")
AMD_VRAM_TOTAL_GIB=$(awk "BEGIN {printf \"%.0f GiB\", $GPU_TOTAL_MEM_AMD / 1077000000}")
fi

if [ "$SKIP_NVIDIA_GPU" == "False" ]; then
#GPU TEMPERATURE NVIDIA
GPU_TEMP_NVIDIA=$(nvidia-smi --query-gpu=temperature.gpu --format=csv | tail -n 1 )
GPU_TEMP_NVIDIA=$(awk "BEGIN {printf \"%.0f°C\", $GPU_TEMP_NVIDIA / 1}")
#GPU NAME NVIDIA
GPU_NAME_NVIDIA=$(nvidia-smi --query-gpu=name --format=csv | tail -n 1 )
#USAGE CORE NVIDIA
GPU_USAGE_NVIDIA=$(nvidia-smi --query-gpu=utilization.gpu --format=csv | tail -n 1 )
#USAGE MEMORY NVIDIA (MiB)
GPU_USED_MEM_NVIDIA=$(nvidia-smi --query-gpu=memory.used --format=csv | tail -n 1 )
#TOTAL MEMORY NVIDIA (MiB)
GPU_TOTAL_MEM_NVIDIA=$(nvidia-smi --query-gpu=memory.total --format=csv | tail -n 1 )
fi


#RAM VENDOR AND SPEED
MEMORY_VENDOR=$(grep "Manufacturer:" ~/.meminfo | head -n 1 | cut -c 15-)
MEMORY_SPEED=$(grep "Speed:" ~/.meminfo | head -n 1 | cut -c 9-)
MEMORY_TYPE=$(grep "Type:" ~/.meminfo | head -n 1 | cut -c 8-)


echo "Distro   ❯ $NAME ($HOSTTYPE)"
echo "Kernel   ❯ $KERNEL"
echo "Shell    ❯ $SHELL $BASH_VERSION"
echo ""
echo "Session  ❯ $XDG_SESSION_TYPE"
echo " User     ❯ $USERNAME ($UID)"
echo " Hostname ❯ $HOSTNAME"
echo " DE       ❯ $XDG_CURRENT_DESKTOP"
echo " Terminal ❯ $(ps -o comm= -p "$(($(ps -o ppid= -p "$(($(ps -o sid= -p "$$")))")))")"
echo ""
echo "Disk (/) ❯ $DISK_MODEL"
echo " Usage    ❯ $USED_SPACE / $TOTAL_SIZE  ($USAGE_PERCENT)"
echo "  Free     ❯ $FREE_SPACE"
echo ""
echo "Memory   ❯" $MEMORY_VENDOR $MEMORY_TYPE $MEMORY_SPEED
echo " Usage    ❯ $USED_GIB / $TOTAL_GIB  ($USED_PERCENTAGE)"
echo "  Free     ❯ $FREE_GIB"
echo ""
echo "CPU      ❯ $CPU_MODEL ($CPU_CORES)"
if [ $VM != True ]; then
echo " Current  ❯ $CPU_FREQUENCY_CUR_BC Mhz $CPU_TEMP"
echo "  Max      ❯ $CPU_FREQUENCY_MAX Mhz"
echo "  Min      ❯ $CPU_FREQUENCY_MIN Mhz"
fi
echo ""
if [ "$SKIP_NVIDIA_GPU" == "False" ]; then
echo "GPU      ❯ $GPU_NAME_NVIDIA"
echo " Temp     ❯ $GPU_TEMP_NVIDIA"
echo " Usage    ❯ $GPU_USAGE_NVIDIA"
echo " VRAM     ❯ $GPU_USED_MEM_NVIDIA / $GPU_TOTAL_MEM_NVIDIA"
# Check if an AMDGPU device was found
fi

if [ "$SKIP_AMD_GPU" == "False" ]; then
if [ -n "$AMDGPU_PATH" ]; then

GPU_NAME_AMD=$(cat ~/.amdgpuname)

if [ -n "$GPU_NAME_AMD" ]; then
echo ""
else
touch ~/.amdgpuname
echo "Example : Radeon RX 7900 XT"
echo "Enter your AMD GPU model: "
read gpu_model
printf "$gpu_model" >> ~/.amdgpuname
fi
echo "GPU      ❯ $GPU_NAME_AMD"
echo " Temp     ❯ $GPU_TEMP_AMD"
echo " Usage    ❯ $GPU_USAGE_AMD %"
echo " VRAM     ❯ $AMD_VRAM_USED_GIB / $AMD_VRAM_TOTAL_GIB"
fi
fi
